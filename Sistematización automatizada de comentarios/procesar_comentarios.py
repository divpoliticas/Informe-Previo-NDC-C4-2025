import pandas as pd
import time
import re
from openai import OpenAI

# Configuraci√≥n
csv_url = "URL_CSV"
modelo = "gpt-4o"  # o gpt-3.5-turbo

# Crear cliente
client = OpenAI(api_key="XXX")

# Prompt que ya usas, completo con contexto y ejemplos
prompt_sistema = """Act√∫a como un investigador en ciencias sociales especializado en sistematizaci√≥n de talleres participativos. Tu tarea es analizar y reescribir comentarios emitidos por participantes en el proceso de actualizaci√≥n de la NDC 2025 de Chile. El objetivo es clasificar y estandarizar los comentarios de forma clara, coherente y contextualizada, como paso previo a transformarlos en recomendaciones de pol√≠tica p√∫blica.

‚ö†Ô∏è Siempre debes usar el contexto espec√≠fico que te estoy entregando en este promt. 

---
CONTEXTO 
---

‚úçÔ∏è Ejemplos de comentarios reescritos:
En la mesa sobre Transici√≥n Socioecol√≥gica Justa, en la secci√≥n de interconexiones, se plante√≥ la necesidad de priorizar la construcci√≥n de capacidades y la recapacitaci√≥n laboral como elementos clave para una transici√≥n justa, destacando su rol estrat√©gico en la reconversi√≥n productiva asociada al cambio clim√°tico.
En la Mesa 2 sobre Transici√≥n Energ√©tica, se plantea la necesidad de detallar c√≥mo las contribuciones se implementar√°n a nivel regional y comunal, identificando los instrumentos habilitantes correspondientes y destacando los impactos esperados en los territorios subnacionales, con el fin de fortalecer la coherencia y eficacia en la gobernanza clim√°tica multinivel.
En la Mesa 2 sobre Transici√≥n Energ√©tica, en la secci√≥n de contribuciones del anteproyecto NDC, se solicit√≥ justificar la meta del 20% en la medida M4, preguntando si esta fue definida en base a la experiencia previa de cumplimiento del NDC anterior y qu√© fundamentos t√©cnicos respaldan su establecimiento.

---

1. Clasifica cada comentario seg√∫n una de las siguientes categor√≠as:
üü© Aporte conceptual o estrat√©gico
üü¶ Comentario operativo o t√©cnico
üüß Pregunta o punto cr√≠tico
‚¨ú Fragmento insuficiente

2. Reescribe el comentario como una **frase √∫nica y completa**, que integre contexto, tema, intenci√≥n, motivaci√≥n. Siempre inicia con el contexto, como los ejemplos de comentarios que te entrego en este promt.

3. Si el comentario es un fragmento insuficiente, responde exactamente:
'Fragmento insuficiente. No es posible reescribir o interpretar el comentario de forma coherente, incluso contando con el contexto entregado.'

---

4. Formato final de respuesta (usa esto para cada comentario):
---
**Tipo de comentario:** [una de las 4 categor√≠as]  
**Comentario reescrito:** [frase completa reescrita, si aplica]  
---

"""

# Cargar CSV y limpiar columnas
df = pd.read_csv(csv_url)
df.columns = df.columns.str.strip()
print("Columnas disponibles:", df.columns.tolist())

# Crear columna de narrativa
def crear_narrativa(row):
    texto = f"### Comentario:\n{row['Text']}\n"
    if pd.notnull(row['Mesa']):
        texto += f"**Mesa tem√°tica:** {row['Mesa']}\n"
    if pd.notnull(row['Area']):
        texto += f"**√Årea metodol√≥gica:** {row['Area']}\n"
    if pd.notnull(row['Dialogo Virtual o Presencial']):
        texto += f"**Instancia de origen:** {row['Dialogo Virtual o Presencial']}\n"
    return texto

df["narrativa"] = df.apply(crear_narrativa, axis=1)

# Procesar uno por uno
resultados = []

for index, row in df.iterrows():
    print(f"Procesando fila {index + 1}/{len(df)} - ID: {row['ID']}")
    try:
        response = client.chat.completions.create(
            model=modelo,
            messages=[
                {"role": "system", "content": prompt_sistema},
                {"role": "user", "content": row["narrativa"]}
            ]
        )
        content = response.choices[0].message.content

        tipo = re.search(r"\*\*Tipo de comentario:\*\*\s*(.*?)\n", content, re.DOTALL)
        texto_reescrito = re.search(r"\*\*Comentario reescrito:\*\*\s*(.*?)\n?---", content, re.DOTALL)

        df.at[index, "Tipo clasificado"] = tipo.group(1).strip() if tipo else None
        df.at[index, "Comentario reescrito"] = texto_reescrito.group(1).strip() if texto_reescrito else None

        resultados.append(index)
        time.sleep(3)  # Espera entre llamadas

    except Exception as e:
        print(f"Error en fila {index}: {e}")
        time.sleep(15)

# Guardar resultados
from datetime import datetime

timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
filename = f"comentarios_procesados_{timestamp}.csv"
df.to_csv(filename, index=False)
print(f"‚úÖ Procesamiento completo. Archivo guardado como {filename}")
